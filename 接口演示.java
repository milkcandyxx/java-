package jieko; // 定义包名为 接口示例

import java.util.Scanner; // 导入 Scanner 类，用于从控制台获取用户输入

/* 接口类似于抽象类，
   但是一个类可以实现多个接口，
   一个类只能继承一个抽象类
 */
/*##########################by milkcandy##########################*/

// 单接口
interface 计算接口 { // 定义一个接口 计算接口
    double 计算面积(); // 抽象方法，用于计算面积
    double 计算周长(); // 抽象方法，用于计算周长
}

// 实现 计算接口 的类
class 矩形1 implements 计算接口 {
    double 长, 宽; // 定义两个成员变量，分别表示矩形的长和宽

    // 初始化长和宽的方法
    public void 设置矩形(int 长, int 宽) {
        this.长 = 长; // 将传入的参数 长 赋值给成员变量 长
        this.宽 = 宽; // 将传入的参数 宽 赋值给成员变量 宽
    }

    @Override
    public double 计算面积() { // 实现接口中的 计算面积() 方法，计算矩形的面积
        return 长 * 宽; // 面积公式：长 × 宽
    }

    @Override
    public double 计算周长() { // 实现接口中的 计算周长() 方法，计算矩形的周长
        return 2 * 长 + 2 * 宽; // 周长公式：2 × 长 + 2 × 宽
    }
}

// 接口的继承
interface 输出接口 { // 定义一个接口 输出接口，用于输出计算结果
    // 默认方法，提供一个默认的打印信息实现，子类可以重写
    default void 输出面积(double 面积) {
        System.out.println("面积：" + 面积 + "\t默认方法"); // 打印面积信息
    }

    // 静态方法，用于创建一个通用的打印消息，可以直接通过接口名调用
    static void 输出周长(double 周长) {
        System.out.println("周长：" + 周长 + "\t静态方法"); // 打印周长信息
    }
}

// 继承 输出接口 的子接口
interface 扩展输出接口 extends 输出接口 {
    // 默认方法，输出接口继承的信息
    default void 输出继承信息() {
        System.out.println("这里是接口的继承"); // 打印接口继承的信息
    }
}

// 多接口实现类
class 矩形2 implements 计算接口, 扩展输出接口 { // 实现 计算接口 和 扩展输出接口 接口
    double 长, 宽; // 定义两个成员变量，分别表示矩形的长和宽

    // 初始化长和宽的方法
    public void 设置矩形(int 长, int 宽) {
        this.长 = 长; // 将传入的参数 长 赋值给成员变量 长
        this.宽 = 宽; // 将传入的参数 宽 赋值给成员变量 宽
    }

    @Override
    public double 计算面积() { // 实现接口中的 计算面积() 方法，计算矩形的面积
        return 长 * 宽; // 面积公式：长 × 宽
    }

    @Override
    public double 计算周长() { // 实现接口中的 计算周长() 方法，计算矩形的周长
        return 2 * 长 + 2 * 宽; // 周长公式：2 × 长 + 2 × 宽
    }
}

// 主类
public class 接口演示 {
    public static void main(String[] args) {
        System.out.println("长方形面积周长计算机兼接口演示"); // 打印程序标题

        Scanner 输入 = new Scanner(System.in); // 创建 Scanner 对象，用于接收用户输入
        矩形1 矩形实例1 = new 矩形1(); // 创建 矩形1 类的对象，用于单接口测试
        矩形2 矩形实例2 = new 矩形2(); // 创建 矩形2 类的对象，用于多接口测试

        // 用户输入长和宽
        System.out.print("输入长：");
        int 长 = 输入.nextInt(); // 从控制台读取用户输入的长，并赋值给变量 长
        System.out.print("输入宽：");
        int 宽 = 输入.nextInt(); // 从控制台读取用户输入的宽，并赋值给变量 宽

        // 用户选择功能
        System.out.print("输入序号\t1.单接口无输出\t2.多接口有输出：");
        int 选择 = 输入.nextInt(); // 从控制台读取用户的选择，并赋值给变量 选择

        if (选择 == 1) { // 如果用户选择 1，进入单接口测试
            矩形实例1.设置矩形(长, 宽); // 调用 矩形1 类的 设置矩形 方法，初始化长和宽
            System.out.println("面积：" + 矩形实例1.计算面积()); // 调用 矩形1 类的 计算面积() 方法计算面积，并打印结果
            System.out.println("周长：" + 矩形实例1.计算周长()); // 调用 矩形1 类的 计算周长() 方法计算周长，并打印结果
        } else if (选择 == 2) { // 如果用户选择 2，进入多接口测试
            矩形实例2.设置矩形(长, 宽); // 调用 矩形2 类的 设置矩形 方法，初始化长和宽
            矩形实例2.输出面积(矩形实例2.计算面积()); // 调用 矩形2 类的 输出面积 方法，输出面积
            输出接口.输出周长(矩形实例2.计算周长()); // 调用 输出接口 接口的静态方法 输出周长，输出周长
            矩形实例2.输出继承信息(); // 调用 矩形2 类的 输出继承信息 方法，输出接口继承的信息
        }
    }
}